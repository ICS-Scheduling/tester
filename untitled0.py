# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xzC6EQ5-fFhKu1Z7OaoVZOVfpX7N9xs-
"""

import os
os.listdir()

import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

df = pd.read_csv("pref4.csv")


# Function to apply styling based on the condition
def highlight_cells(value):
    #if value == 'nan': return ''
    if value == 'Pref1': return 'background-color: #01260f' # dark green
    if value == 'Pref2': return 'background-color: #024d1e' # green
    if value == 'Not Preferred': return 'background-color: #048a36' # light green

    if value == 'Available also MW': return 'background-color: #ff9900' # orange

    if value == 'Pref1;Available also MW': return 'background-color: #091659' # dark blue
    if value == 'Pref2;Available also MW': return 'background-color: #1a2c8a' # blue
    if value == 'Pref1;Pref2;Available also MW': return 'background-color: #0000ff' # dark blue
    if value == 'Not Preferred;Available also MW': return 'background-color: #9999ff' # light blue
    else: return ''

# Sorting order
df = df.sort_values(by=['Department','GeneralForm', 'Timestamp'])

# Combine columns with similar names
for col in ['M8AM', 'M9AM', 'M10AM', 'M11AM', 'M12PM', 'M1PM', 'M2PM', 'M3PM', 'M4PM', 'M5PM', 'T8AM', 'T930AM', 'T11AM', 'T1230PM', 'T2PM', 'T330PM', 'T5PM', 'T630PM', 'T8PM']:
  df[col] = df[col].fillna(df[f'{col}.1'])

# Drop the original columns if needed
df = df.drop([f'{col}.1' for col in ['M8AM', 'M9AM', 'M10AM', 'M11AM', 'M12PM', 'M1PM', 'M2PM', 'M3PM', 'M4PM', 'M5PM','T8AM', 'T930AM', 'T11AM', 'T1230PM', 'T2PM', 'T330PM', 'T5PM', 'T630PM', 'T8PM']], axis=1)
df.style.applymap(highlight_cells)

selected_cols = ['M8AM', 'M9AM', 'M10AM', 'M11AM', 'M12PM', 'M1PM', 'M2PM', 'M3PM', 'M4PM', 'M5PM',
                  'T8AM', 'T930AM', 'T11AM', 'T1230PM', 'T2PM', 'T330PM', 'T5PM', 'T630PM', 'T8PM']

selected_df = df[selected_cols]

selected_df.style.applymap(highlight_cells)

# an example of search
filtered_df = df[df["Name"] == "Ioannis Panageas"]
filtered_df.style.applymap(highlight_cells)
filtered_df

read_file = pd.read_csv('pref4.csv')
read_file.to_excel('output4.xlsx', index=None, header=True)

# Since Tuesday prefernces can also apply to mondays, I wanted to figure out how to color based on condition.
# Then I realized that the timeslots are different, so I'm not coloring at all.
#T8AM	T930AM	T11AM	T1230PM	T2PM	T330PM	T5PM	T630PM	T8PM
#M8AM	M9AM	M10AM	M11AM	M12PM	M1PM	M2PM	M3PM	M4PM	M5PM
def highlight(x):
  df1 = pd.DataFrame('', index=x.index, columns=x.columns)
  m = x["T8AM"].isin(["Available also MW"])
  df1.loc[m, 'A'] = 'background-color: #ff9900'

  m = x["T930AM"].isin(["Available also MW"])
  df1.loc[m, 'A'] = 'background-color: #ff9900'

  m = x["T11AM"].isin(["Available also MW"])
  df1.loc[m, 'A'] = 'background-color: #ff9900'

  m = x["T1230PM"].isin(["Available also MW"])
  df1.loc[m, 'A'] = 'background-color: #ff9900'
  return df1




df.style.apply(highlight, axis=None)

# Example of writing to a xlsx file, incase if needed

import openpyxl
from openpyxl.styles import PatternFill

wb = openpyxl.load_workbook("output4.xlsx")
ws = wb['Sheet1']


colors = ['00660066', '00FFFFCC', '00FF0000', '0000FF00', '00660066']
fillers = []

for color in colors:
    temp = PatternFill(patternType='solid', fgColor=color)
    fillers.append(temp)


cell_ids = ['B2', 'B3', 'B4', 'B5', 'A2']
for i in range(5):
    ws[cell_ids[i]].fill = fillers[i]

wb.save("GFGCoursePrices.xlsx")



import os
import glob
import csv
from xlsxwriter.workbook import Workbook


for csvfile in glob.glob(os.path.join('.', '*.csv')):
    workbook = Workbook(csvfile[:-4] + '.xlsx')
    worksheet = workbook.add_worksheet()
    with open(csvfile, 'rt', encoding='utf8') as f:
        reader = csv.reader(f)
        for r, row in enumerate(reader):
            for c, col in enumerate(row):
                worksheet.write(r, c, col)
    workbook.close()

df = pd.DataFrame([
  { 'color_A_in_red': 'yes' , 'A': 1 },
  { 'color_A_in_red': False , 'A': 2 },
  { 'color_A_in_red': True , 'A': 2 },
])

def highlight(x):
    c = "background-color:red"
    #condition
    m = x["color_A_in_red"].isin(["yes"])
    # DataFrame of styles
    df1 = pd.DataFrame('', index=x.index, columns=x.columns)
    # set columns by condition
    df1.loc[m, 'A'] = c
    return df1


df.style.apply(highlight, axis=None)